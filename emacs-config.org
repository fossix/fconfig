#+STARTUP: overview
#+header-args: :tangle yes :noweb yes

* Emacs Config
*** Package setup
    We will use melpa and elpa as our package archives, and load
    =use-package=, which will be used extensively everywhere else.

    #+begin_src elisp
      (require 'package)
      (setq package-archives nil)
      ;;; Auto add packages
      (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")))
      (add-to-list 'package-archives
		   '("melpa" . "https://melpa.org/packages/") t)
      (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

      (package-initialize)

      (require 'use-package)
      (use-package diminish :ensure t)
      (use-package general :ensure t)
    #+end_src

    Load the config manager =fconfig=, so it will be easier to load utility
    function from =.el= files.

    #+begin_src elisp
      (require 'fconfig)

      (fconfig/theme! #'solarized-wombat-dark)
      (fconfig/font! "Jet Brains Mono-11")

      ;; this is ugly
      (setq notes-dir (expand-file-name "~/notes/"))

      (fconfig/init)
      (fconfig! utils)

    #+end_src
*** Fundamentals
***** Setup packages and utility functions
      #+begin_src elisp
        (defun fconfig-load (file)
          "This function is to be used to load files. If a filename has org
        extension babel will be used to load the file, or else just plain load-file"
          (let ((filename (expand-file-name file config-dir)))
            (if (file-exists-p filename)
                (if (string= (file-name-extension filename) "org")
                    (org-babel-load-file filename)
                  (load-file filename))
              (message (format "file not found: %s" filename)))))
      #+end_src
***** Custom file
      Lets have a separate custom file.

      #+begin_src elisp
      (setq custom-file "~/.emacs.d/custom.el")
      #+end_src

***** Don't show startup
      #+begin_src elisp
        (setq inhibit-startup-screen t
              initial-scratch-message nil
              inhibit-startup-message t)
      #+end_src
***** All about backups
      I would to keep backups and not delete the old ones, even if a file is part
      of a VC.

      #+begin_src elisp
        (setq
         backup-directory-alist '(("." . "~/.emacs.d/backups"))
         delete-old-versions -1
         version-control t
         vc-make-backup-files t
         auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
      #+end_src

***** No bars
      No menu bar, tool bar or scroll bar

      #+begin_src elisp
        (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
        (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
        (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
        (when (fboundp  'tooltip-mode) (tooltip-mode -1))
      #+end_src

***** Lets prefer utf-8
      That's specifically for cygwin and windows

      #+begin_src elisp
        (set-default-coding-systems 'utf-8-unix)
        (prefer-coding-system 'utf-8-unix)
        (set-default buffer-file-coding-system 'utf-8-unix)
      #+end_src

***** Interact with the system clipboard
      #+begin_src elisp
        (setq select-enable-clipboard t
              select-enable-primary t)
      #+end_src

***** Load location settings
      This should be loaded early; and this cannot be part of the person config
      load section, since it is loaded at the end.

      #+begin_src elisp
       (let ((location-file (expand-file-name "location.el" "~/.emacs.d")))
         (when (file-exists-p location-file)
           (load-file location-file)))
       #+end_src


      Let have some space between lines, make the text more legible.

      #+begin_src elisp
        (setq-default line-spacing 0.25)
      #+end_src

***** Mode line
      A minimilatic, non-cluttering mode line is what is needed. Doom mode line
      does that job.

      #+begin_src elisp
        (use-package minions
          :ensure t
          :hook (doom-modeline-mode . minions-mode))

        (use-package doom-modeline
          :ensure t
          :hook (emacs-startup . doom-modeline-mode)
          :custom-face
          (mode-line ((t (:height 1.20))))
          :custom
          (doom-modeline-height 15)
          (doom-modeline-bar-width 6)
          (doom-modeline-lsp t)
          (doom-modeline-github nil)
          (doom-modeline-irc nil)
          (doom-modeline-persp-name nil)
          (doom-modeline-buffer-file-name-style 'relative-from-project)
          (doom-modeline-major-mode-icon t))
      #+end_src

*** Org-mode
    Don't want to see markers for /italics/ and *bold* and _underline_, and let's have
    only odd heading levels, with UT8 characters, makes for a slightly cleaner look.
    #+begin_src elisp
      (setq org-hide-emphasis-markers t
            org-odd-levels-only t
            org-pretty-entities t)

      (add-hook 'org-mode-hook 'variable-pitch-mode)
    #+end_src

    Use a org-bullets to show custom unicode bullets.
    #+begin_src elisp
      (use-package org-bullets
        :ensure t
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "☯" "○" "✸" "✿" "✜" "◆" "▶"))
        (org-ellipsis "⤵"))
    #+end_src

    Always show latex previews, and pretty entities

    #+begin_src elisp
      (setq org-startup-with-latex-preview t)
      (add-hook 'org-brain-visualize-text-hook 'org-latex-preview)
    #+end_src

    Let the syntax highlight be enabled in the source blocks. Also editing in
    the same window is less distracting.

    #+begin_src elisp
      (setq org-src-fontify-natively t
            org-src-window-setup 'current-window
            org-src-strip-leading-and-trailing-blank-lines t)
    #+end_src

    Exiting org code block edit buffer, I see leading whitespaces in the file,
    which is not in the code blocks itself, but at a file level. I don't like
    seeing leading/trailing whitespaces in the ~git diff~ output.

    #+begin_src elisp
      (advice-add 'org-edit-src-exit :after 'whitespace-cleanup)
    #+end_src

***** Setup org modules
      The two most important org packages that we need are org-agenda
      and org-capture, set those up fist.

      #+begin_src elisp
        (use-package org-agenda)
        (use-package org-capture)
      #+end_src

***** Presentation using org-mode
      The slides for a presentation are usually generated from org file, through
      beamer and $\LaTeX$. Instead of doing that, =org-present= combined with
      =hide-mode-line= gives a nice interface to show slides directly from emacs.

      #+begin_src elisp
        (use-package hide-mode-line
          :ensure t)

        (use-package org-present
          :ensure t
          :config
          (add-hook 'org-present-mode-hook
                    (lambda ()
                      (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                             (header-line (:height 4.5) variable-pitch)
                                             (org-code (:height 1.5) org-code)
                                             (org-verbatim (:height 1.5) org-verbatim)
                                             (org-block (:height 1.20) org-block)
                                             (org-block-begin-line (:height 0.7) org-block)))
                      (org-display-inline-images)
                      (org-present-hide-cursor)
                      (hide-mode-line-mode 1)))

          (add-hook 'org-present-mode-quit-hook
                    (lambda ()
                      (setq-local face-remapping-alist '((default variable-pitch default)))
                      (org-remove-inline-images)
                      (org-present-show-cursor)
                      (org-present-small)
                      (hide-mode-line-mode -1))))
      #+end_src

*** Mail
    Notmuch mail setup

    #+begin_src elisp
      (use-package notmuch
        :ensure t
        :config
        (setq notmuch-show-logo nil
              notmuch-column-control 1.0
              notmuch-mua-compose-in 'new-frame)

        ;; Load all the defuns which will be used later
        (fconfig! mail))
    #+end_src

    Helm and notmuch hello. The saved searches for notmuch-hello are defined in
    personal config file.

    #+begin_src elisp
      (use-package helm-notmuch
        :ensure t
        :commands helm-notmuch)

         ;;; from http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
      (use-package notmuch-hello
        :commands (notmuch notmuch-hello)
        :config

        (setq notmuch-hello-thousands-separator "," ;; Add a thousand separator
              notmuch-column-control 1.0)           ;; don't display columns
        (general-def notmuch-hello-mode-map "h" 'helm-notmuch)

        (add-hook 'notmuch-hello-refresh-hook
                  (lambda ()
                    (whitespace-mode -1)))
        ;; We add items later in reverse order with (add-to-list ...):
        (setq notmuch-hello-sections '())
        (add-to-list 'notmuch-hello-sections 'fconfig/notmuch-hello-insert-recent-searches)
        (add-to-list 'notmuch-hello-sections 'notmuch-hello-insert-search)
        (add-to-list 'notmuch-hello-sections 'fconfig/notmuch-hello-insert-searches))
    #+end_src

    Let's autoload =mail-hist= and and =sendmail=

    #+begin_src elisp
      (autoload 'mail-hist-forward-header "mail-hist")
      (autoload 'mail-text-start          "sendmail")
    #+end_src

    I use msmtp to send mail, and use a script which will queue mails when unable
    to send. I lost the source where I copied the script from.

    #+begin_src elisp
      (setq sendmail-program "~/bin/msmtpQ"
            message-sendmail-f-is-evil nil
            message-interactive t
            message-send-mail-function 'message-send-mail-with-sendmail
            notmuch-fcc-dirs nil
            mail-envelope-from 'header
            message-sendmail-envelope-from 'header
            message-signature nil
            message-kill-buffer-on-exit t
            message-mail-alias-type 'ecomplete
            message-auto-save-directory nil)
    #+end_src

***** Email Workflow
      Use org to store links from notmuch, and setup a capture template for mails.

      - Follow up :: Capture the mail link and insert a deadline entry
      - Read later :: capture template similar to 'Follow up' but without a
        deadline.

      #+begin_src elisp
        (use-package ol-notmuch)
        (setq org-capture-templates nil)
        (setq org-capture-templates
              (append
               '(("M" "Mail")
                 ("Mf" "Follow up" entry
                  (file+headline "TODO" "Mail")
                  ;; Default deadline of three days, so it shows in our agenda and we
                  ;; don't miss it.
                  "* TODO %a :@mail:
                DEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n %i\n"
                  :immediate-finish t)
                 ("Mr" "Read later" entry
                  (file+headline "TODO" "Mail")
                  "* TODO %a :@mail:\n\n %i\n" :immediate-finish t))
               org-capture-templates))

        (defun ss/mail-follow-up()
          "Capture mail to org mode."
          (interactive)
          (org-store-link nil)
          (org-capture nil "Mf"))

        (defun ss/mail-read-later()
          "Capture mail to org mode."
          (interactive)
          (org-store-link nil)
          (org-capture nil "Mr"))
      #+end_src

***** Keybindings
      Keybindings for deleting, toggling states and flagging.

      All bindings in the search mode map
      #+begin_src elisp
        (general-def notmuch-search-mode-map "!" 'fconfig/notmuch-toggle-flagged)
        (general-def notmuch-search-mode-map "#" 'fconfig/notmuch-toggle-unread)
        (general-def notmuch-search-mode-map "<C-tab>" 'notmuch-tree-from-search-current-query)
        (general-def notmuch-search-mode-map "<down>" 'next-line)
        (general-def notmuch-search-mode-map "<tab>" 'notmuch-tree-from-search-thread)
        (general-def notmuch-search-mode-map "<up>" 'previous-line)
        (general-def notmuch-search-mode-map "d" 'fconfig/notmuch-delete-thread)
        (general-def notmuch-search-mode-map "]" 'ss/mail-read-later)
        (general-def notmuch-search-mode-map "," 'ss/mail-follow-up)
      #+end_src

      Bindings in the show mode map
      #+begin_src elisp
        (general-def notmuch-show-mode-map "!" 'fconfig/notmuch-toggle-flagged)
        (general-def notmuch-show-mode-map "#" 'fconfig/notmuch-toggle-unread)
        (general-def notmuch-show-mode-map "<down>" 'next-line)
        (general-def notmuch-show-mode-map "<left>" 'backward-char)
        (general-def notmuch-show-mode-map "<right>" 'forward-char)
        (general-def notmuch-show-mode-map "<up>" 'previous-line)
        (general-def notmuch-show-mode-map "D" 'fconfig/notmuch-delete-thread)
        (general-def notmuch-show-mode-map "\C-c\C-o" 'browse-url-at-point)
        (general-def notmuch-show-mode-map "b" 'fconfig/notmuch-bounce-message)
        (general-def notmuch-show-mode-map "d" 'fconfig/notmuch-delete-message)
        (general-def notmuch-show-mode-map "," 'ss/mail-follow-up)
        (general-def notmuch-show-mode-map "]" 'ss/mail-read-later)
        (general-def notmuch-show-mode-map "X"
          '(lambda ()
             (interactive)
             (fconfig/notmuch-export-patch (notmuch-show-get-message-id)
                                           (notmuch-show-get-prop :headers))))
      #+end_src

      Bindings in the tree mode (threaded view)

      #+begin_src elisp
        (general-def notmuch-tree-mode-map "!" 'fconfig/notmuch-toggle-flagged)
        (general-def notmuch-tree-mode-map "#" 'fconfig/notmuch-toggle-unread)
        (general-def notmuch-tree-mode-map "<down>" 'next-line)
        (general-def notmuch-tree-mode-map "<up>" 'previous-line)
        (general-def notmuch-tree-mode-map "d" 'fconfig/notmuch-delete-message)
        (general-def notmuch-tree-mode-map "X" '(lambda () (interactive) (notmuch-tree-thread-mapcar 'fconfig/notmuch-tree-get-patch)))
      #+end_src

      Bindings to show patch in diff mode

      #+begin_src elisp
        (general-def notmuch-show-part-map "d" 'fconfig/notmuch-show-view-as-patch)
      #+end_src

*** Programming
***** Compilation
      Always scroll to the first error

      #+begin_src elisp
        (setq compilation-scroll-output 'first-error)
      #+end_src
***** Scheme
      Let us use ~guile~ which is the default in fedora distributions. The default
      guile is old, and ~geiser~ is not happy with it.

      #+begin_src elisp
        (use-package geiser-guile
          :config
          (setq geiser-defauslt-implementation 'guile
                geiser-guile-binary "guile2.2"))
      #+end_src
*** General Keybindings
*** Theme

    Will theme customisation till I integrate with the theme (=aanila=).

    #+begin_src elisp
      (custom-theme-set-faces
       'user
       '(org-block ((t (:background "gray3" :extend t))))
       '(org-meta-line ((t (:foreground "dim gray"))))
       '(org-block-end-line ((t (:foreground "gray20" :overline t :extend t))))
       '(org-block-begin-line ((t (:foreground "gray20" :underline t :extend t))))
       '(show-paren-match ((t (:foreground "light gray" :background "gray10" :extend t))))
       '(bookmark-face ((t (:foreground nil :background "DodgerBlue4")))))
    #+end_src
*** Temporary
    The following is a paste of a exiting config file, from which I will slowly
    move everything to org files.

    #+begin_src elisp
      (let ((file-name-handler-alist nil))
        (fconfig! core)
        (fconfig! packages)
        (fconfig! buffer)
        (fconfig! helm)
        (fconfig! org-config)
        (fconfig! solar)
        (fconfig! dashboard)
        (fconfig! vc)
        (fconfig! lsp)
        (fconfig! progmode)
        (fconfig! mm)
        ;; (fconfig! finance)
        ;; (fconfig! speak)
        ;; (fconfig! devanagari)
        (fconfig! bindings))

      (defun santosh/org-agenda-open ()
        (interactive)
        (if (get-buffer "*Org Agenda*")
            (progn
              (switch-to-buffer-other-frame "*Org Agenda*")
              (org-agenda-redo))
          (progn
            (let (
                  (org-agenda-window-setup 'only-window)
                  (org-frame (make-frame
                              '((no-other-frame . t)
                                (unsplittable . t)
                                (height . 30)
                                (buffer-list . '("*Org Agenda*"))
                                (minibuffer . nil)
                                (undecorated . t)))))
              (set-frame-font "monospace-9" t nil)
              (org-agenda nil "A")
              (org-agenda-goto-today)
              (set-window-dedicated-p (selected-window) t)
              (delete-other-windows)))))

      (global-map! "C-c o RET" 'santosh/org-agenda-open)

      (server-start)
      (fconfig/finish)
    #+end_src

*** Load personal setup
    #+begin_src elisp
      (org-babel-load-file (expand-file-name
                            (concat (user-login-name) ".org") "~/.emacs.d"))
      (load custom-file)
    #+end_src
